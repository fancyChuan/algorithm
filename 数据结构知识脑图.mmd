Mind Map generated by NB MindMap plugin   
> __version__=`1.1`,showJumps=`true`
---

# 数据结构

## 栈

### 特点：先进后出，后进先出

#### 一次只弹一个

#### 一直弹，直到满足条件

##### 单调性

###### 递增栈

####### 消除

######## 小数消除大数

####### 栈中元素递增

###### 递减栈

####### 消除

######## 大数消除小数

####### 栈中元素递减

##### 同时满足两个条件

###### 单调性

###### 余下的数的个数

### 场景：在只需要访问最新数据时

#### 配对&消除

##### 内容一样

###### 使用计数器优化

##### 内容不一样
- TOPIC
<pre>17B6EE05FA3A</pre>

###### 存放内容

##### 消除

###### 配对的，两个都消除

###### 配对的时候，会留一个

### 栈中内存
> topicLinkUID=`17B6EE05FA3A`


#### 存放内容本身

#### 存放内容的索引

## 队列
> leftSide=`true`


### FIFO队列

#### 特性

##### push

##### pop
> leftSide=`true`


#### 分层遍历
> leftSide=`true`


##### QueueSize=当前层结点数

##### 获取下一层
> leftSide=`true`


#### 分层遍历的表示

##### Queue

##### 两个List
> leftSide=`true`


##### 指针
> leftSide=`true`


#### 二叉树层次遍历的解题技巧
> leftSide=`true`


##### 遍历方式变化

###### 二叉树的锯齿形遍历

###### 二叉树层次倒序遍历
> leftSide=`true`


##### 层的信息变化
> leftSide=`true`


###### 求层的平均值

###### 二叉树最深层的叶结点的和
> leftSide=`true`


###### 二叉树的最大深度
> leftSide=`true`


##### 树的变化
> leftSide=`true`


###### N叉树的层次遍历

###### N叉树的最大深度
> leftSide=`true`


### 循环队列
> leftSide=`true`

- TOPIC
<pre>17CB3046637A</pre>

#### 取模技巧

#### 空队列和满队列
> leftSide=`true`


##### used

##### 冗余元素
> leftSide=`true`


###### 无锁队列

### 双端队列
> leftSide=`true`,topicLinkUID=`17CB3046637A`


#### 单调队列

##### 题目

###### 滑动窗口求最大值/最小值

###### 基于隐藏的数据来滑动
> leftSide=`true`


##### 覆盖范围

###### 入队扩张

####### 入队只压值

######## 不能严格

####### 入队压值和下标
> leftSide=`true`


######## 可以严格递减/严格递增

###### 出队缩减
> leftSide=`true`


####### 元素相等判断出队

####### 利用下标判断出队
> leftSide=`true`


##### 队首

###### 最大值/最小值

## 优先级队列
> leftSide=`true`


### 堆

#### 上浮

##### push

#### 下沉
> leftSide=`true`


##### pop

### 特性

#### push

##### logn

#### pop最大/最小
> leftSide=`true`


##### logn

### 数组最小的k个元素

#### topK

##### topK高频单词

##### topK高频元素
> leftSide=`true`


##### topK个最近的点
> leftSide=`true`


#### 字符出现频率排序

#### 数据流中最大的第k个数
> leftSide=`true`


#### 数据流中位数？？
> leftSide=`true`


#### 合并k有序链表
> leftSide=`true`


### 题目

#### 将消耗的过程转为收集

##### 堆/优先级队列

###### push

#### 优先使用某些元素
> leftSide=`true`


##### 堆/优先级队列

###### pop

## 链表
> leftSide=`true`


### 基本操作

#### 初始化dummy链表

#### 尾插法
> leftSide=`true`


##### 条件

###### 有条件append

####### 是否等于target

######## 剔除节点题

####### 是否等于新链表尾部结点值
> leftSide=`true`


######## 去重题

####### 选择较小的数
> leftSide=`true`


######## 合并题

#### 头插法
> leftSide=`true`


##### 条件

###### 无条件insert

####### 链表反转题

#### 查找节点
> leftSide=`true`


#### 插入指定位置之前
> leftSide=`true`


#### 删除节点
> leftSide=`true`


### 思想

#### 新链表

##### 新增1条

##### 新增2条
> leftSide=`true`


###### 交换链表节点题

#### 双指针
> leftSide=`true`


##### 先走一步，再走一步

###### 查找结点题

##### 先走k步，再走一步
> leftSide=`true`


###### 删除倒数第k个节点

### 小组合
> leftSide=`true`


#### 拆分链表

#### 合并链表
> leftSide=`true`


##### 有序合并

##### 先后合并
> leftSide=`true`


## 树

### 前序遍历

#### 考点

##### 前序

###### 解法

####### 递归

####### 栈

####### Morris

###### 题目

####### 二叉树的前序遍历
> topicLinkUID=`17CEAF1E60AA`


##### 影子二叉树

###### 题目

####### 验证二叉树

####### 是否相同的二叉树
- TOPIC
<pre>17CEAF1E60AA</pre>

####### 路径总和：是否存在根到叶子纸盒等于给定值

####### 根到叶子结点的数字之和

##### 回溯

###### 二叉树上的回溯

####### 题目

######## 路径总和：输出等于给定值的所有路径

######## 二叉树的所有路径
